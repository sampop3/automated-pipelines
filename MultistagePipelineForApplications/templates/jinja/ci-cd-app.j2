#jinja2: trim_blocks:False
---
# Details of parameters to be passed for Jenkinsfile to consumed in  ci_cd_namespace.
app_detail:
  NAME: "{{ app_name }}"
  {%- for key, value in projects.iteritems()|sort()  %}      
  {{ key |upper }}: "{{ value }}"
  {%- endfor -%}
  {% raw %}
  JENKINSFILE_SOURCE_REPOSITORY_REF: "{{ scm_branch }}"
  JENKINSFILE_SOURCE_REPOSITORY_URL: "{{ scm_url }}"
  JENKINSFILE_SOURCE_SECRET: "{{ scm_secret_name }}"
  JENKINSFILE_CONTEXT_DIR: "{{ jenkins_file_contextdir }}"
  RUN_POLICY: Parallel
  {% endraw %}

# Jenkins Slaves
{%- for slave in jenkinslaves|sort()  %}
{{ slave|replace("-", "_") }}:
  AGENT_NAME: "{{ slave }}"
  IMAGE: "docker-registry.default.svc:5000/openshift/jenkins-{{ slave }}"
  {%- raw %}
  NEXUS_SERVER: "{{ nexus.server }}"
  NEXUS_SECRET_NAME: "{{ nexus_secret.SECRET_NAME }}"
  {% endraw -%}
{% endfor %}

openshift_cluster_content:
- object: ci-for-app
  content:
  {%- raw %}
  # Create the secret using the encrypted private key to be able to checkout Jenkinsfile.
  - name: ssh-private-key
    template: "{{ inventory_dir }}/../templates/secret/secret-ssh-private-key-template.yaml"
    params_from_vars:
      SECRET_NAME: "{{ scm_secret_name }}"
      SSH_PRIVATE_KEY: "{{ encrypted_gitea_key }}"  #read from encrypted-secrets.yaml (vault file)
    namespace: "{{ projects.ci_cd_namespace }}"
    tags:
    - pipeline-ssh-private-key
  
    
  # create nexux secret to be used by the slave
  - name: nexus-secret
    template: "{{ inventory_dir }}/../templates/secret/secret-user-pass-plaintext.yaml"
    params_from_vars: "{{ nexus_secret }}"
    namespace: "{{ projects.ci_cd_namespace }}"
    tags:
    - jenkins
    - secret
    - ci-cd-secrets
  {% endraw -%}

  {%- for slave in jenkinslaves|sort()  %}
  # create the configmap for  {{ slave }} jenkins slave images
  - name: {{ slave }}-configmap
    template: {% raw %}"{{ inventory_dir }}/../templates/JenkinsSlave/slave-config-map-template.yaml"{% endraw %}
    params_from_vars: {{ '"{{' }}{{ slave|replace("-", "_") }}{{ '}}"' }}
    namespace: "{{ projects.ci_cd_namespace }}"
    tags:
    - pipeline-jenkins {{ slave }}
  {% endfor %}

  {%- raw %}
  # deploy the jenkins from out custom template
  - name: jenkins-master
    template: "{{ inventory_dir }}/../templates/jenkins/jenkins-generic.yaml"
    params_from_vars: "{{ jenkins_master }}"
    namespace: "{{ projects.ci_cd_namespace }}"
    tags:
    - ci

  #Create the pipeline build config in the cicd namespace
  - name: pipeline
    template: "{{ inventory_dir }}/../templates/jenkinsPipeline/pipelinebc-template.yaml"
    params_from_vars: "{{ app_detail }}"
    namespace: "{{ projects.ci_cd_namespace }}"
    tags:
    - ci
  {% endraw -%}